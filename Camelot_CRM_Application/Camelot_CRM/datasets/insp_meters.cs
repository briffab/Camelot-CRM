//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Camelot.datasets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class insp_meters : DataSet {
        
        private MetersDataTable tableMeters;
        
        public insp_meters() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected insp_meters(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Meters"] != null)) {
                    this.Tables.Add(new MetersDataTable(ds.Tables["Meters"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MetersDataTable Meters {
            get {
                return this.tableMeters;
            }
        }
        
        public override DataSet Clone() {
            insp_meters cln = ((insp_meters)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Meters"] != null)) {
                this.Tables.Add(new MetersDataTable(ds.Tables["Meters"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableMeters = ((MetersDataTable)(this.Tables["Meters"]));
            if ((this.tableMeters != null)) {
                this.tableMeters.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "insp_meters";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/insp_meters.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableMeters = new MetersDataTable();
            this.Tables.Add(this.tableMeters);
        }
        
        private bool ShouldSerializeMeters() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void MetersRowChangeEventHandler(object sender, MetersRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MetersDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnType;
            
            private DataColumn columnSerial_Number;
            
            private DataColumn columnLocation;
            
            private DataColumn columnPrevious_Reading;
            
            private DataColumn columnNew_Reading;
            
            private DataColumn columnRate;
            
            internal MetersDataTable() : 
                    base("Meters") {
                this.InitClass();
            }
            
            internal MetersDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            internal DataColumn Serial_NumberColumn {
                get {
                    return this.columnSerial_Number;
                }
            }
            
            internal DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            internal DataColumn Previous_ReadingColumn {
                get {
                    return this.columnPrevious_Reading;
                }
            }
            
            internal DataColumn New_ReadingColumn {
                get {
                    return this.columnNew_Reading;
                }
            }
            
            internal DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            public MetersRow this[int index] {
                get {
                    return ((MetersRow)(this.Rows[index]));
                }
            }
            
            public event MetersRowChangeEventHandler MetersRowChanged;
            
            public event MetersRowChangeEventHandler MetersRowChanging;
            
            public event MetersRowChangeEventHandler MetersRowDeleted;
            
            public event MetersRowChangeEventHandler MetersRowDeleting;
            
            public void AddMetersRow(MetersRow row) {
                this.Rows.Add(row);
            }
            
            public MetersRow AddMetersRow(string Type, string Serial_Number, string Location, string Previous_Reading, string New_Reading, string Rate) {
                MetersRow rowMetersRow = ((MetersRow)(this.NewRow()));
                rowMetersRow.ItemArray = new object[] {
                        Type,
                        Serial_Number,
                        Location,
                        Previous_Reading,
                        New_Reading,
                        Rate};
                this.Rows.Add(rowMetersRow);
                return rowMetersRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MetersDataTable cln = ((MetersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MetersDataTable();
            }
            
            internal void InitVars() {
                this.columnType = this.Columns["Type"];
                this.columnSerial_Number = this.Columns["Serial Number"];
                this.columnLocation = this.Columns["Location"];
                this.columnPrevious_Reading = this.Columns["Previous Reading"];
                this.columnNew_Reading = this.Columns["New Reading"];
                this.columnRate = this.Columns["Rate"];
            }
            
            private void InitClass() {
                this.columnType = new DataColumn("Type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnType);
                this.columnSerial_Number = new DataColumn("Serial Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSerial_Number);
                this.columnLocation = new DataColumn("Location", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocation);
                this.columnPrevious_Reading = new DataColumn("Previous Reading", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrevious_Reading);
                this.columnNew_Reading = new DataColumn("New Reading", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNew_Reading);
                this.columnRate = new DataColumn("Rate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRate);
            }
            
            public MetersRow NewMetersRow() {
                return ((MetersRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MetersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MetersRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MetersRowChanged != null)) {
                    this.MetersRowChanged(this, new MetersRowChangeEvent(((MetersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MetersRowChanging != null)) {
                    this.MetersRowChanging(this, new MetersRowChangeEvent(((MetersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MetersRowDeleted != null)) {
                    this.MetersRowDeleted(this, new MetersRowChangeEvent(((MetersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MetersRowDeleting != null)) {
                    this.MetersRowDeleting(this, new MetersRowChangeEvent(((MetersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMetersRow(MetersRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MetersRow : DataRow {
            
            private MetersDataTable tableMeters;
            
            internal MetersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMeters = ((MetersDataTable)(this.Table));
            }
            
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableMeters.TypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeters.TypeColumn] = value;
                }
            }
            
            public string Serial_Number {
                get {
                    try {
                        return ((string)(this[this.tableMeters.Serial_NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeters.Serial_NumberColumn] = value;
                }
            }
            
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tableMeters.LocationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeters.LocationColumn] = value;
                }
            }
            
            public string Previous_Reading {
                get {
                    try {
                        return ((string)(this[this.tableMeters.Previous_ReadingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeters.Previous_ReadingColumn] = value;
                }
            }
            
            public string New_Reading {
                get {
                    try {
                        return ((string)(this[this.tableMeters.New_ReadingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeters.New_ReadingColumn] = value;
                }
            }
            
            public string Rate {
                get {
                    try {
                        return ((string)(this[this.tableMeters.RateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeters.RateColumn] = value;
                }
            }
            
            public bool IsTypeNull() {
                return this.IsNull(this.tableMeters.TypeColumn);
            }
            
            public void SetTypeNull() {
                this[this.tableMeters.TypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsSerial_NumberNull() {
                return this.IsNull(this.tableMeters.Serial_NumberColumn);
            }
            
            public void SetSerial_NumberNull() {
                this[this.tableMeters.Serial_NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsLocationNull() {
                return this.IsNull(this.tableMeters.LocationColumn);
            }
            
            public void SetLocationNull() {
                this[this.tableMeters.LocationColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrevious_ReadingNull() {
                return this.IsNull(this.tableMeters.Previous_ReadingColumn);
            }
            
            public void SetPrevious_ReadingNull() {
                this[this.tableMeters.Previous_ReadingColumn] = System.Convert.DBNull;
            }
            
            public bool IsNew_ReadingNull() {
                return this.IsNull(this.tableMeters.New_ReadingColumn);
            }
            
            public void SetNew_ReadingNull() {
                this[this.tableMeters.New_ReadingColumn] = System.Convert.DBNull;
            }
            
            public bool IsRateNull() {
                return this.IsNull(this.tableMeters.RateColumn);
            }
            
            public void SetRateNull() {
                this[this.tableMeters.RateColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MetersRowChangeEvent : EventArgs {
            
            private MetersRow eventRow;
            
            private DataRowAction eventAction;
            
            public MetersRowChangeEvent(MetersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MetersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
