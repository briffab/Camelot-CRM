//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Camelot.datasets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Calamity : DataSet {
        
        private DetailsDataTable tableDetails;
        
        public Calamity() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Calamity(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Details"] != null)) {
                    this.Tables.Add(new DetailsDataTable(ds.Tables["Details"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DetailsDataTable Details {
            get {
                return this.tableDetails;
            }
        }
        
        public override DataSet Clone() {
            Calamity cln = ((Calamity)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Details"] != null)) {
                this.Tables.Add(new DetailsDataTable(ds.Tables["Details"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDetails = ((DetailsDataTable)(this.Tables["Details"]));
            if ((this.tableDetails != null)) {
                this.tableDetails.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "Calamity";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Calamity.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableDetails = new DetailsDataTable();
            this.Tables.Add(this.tableDetails);
        }
        
        private bool ShouldSerializeDetails() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DetailsRowChangeEventHandler(object sender, DetailsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DetailsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnA;
            
            private DataColumn columnB;
            
            private DataColumn columnC;
            
            private DataColumn columnD;
            
            private DataColumn columnE;
            
            private DataColumn columnF;
            
            internal DetailsDataTable() : 
                    base("Details") {
                this.InitClass();
            }
            
            internal DetailsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AColumn {
                get {
                    return this.columnA;
                }
            }
            
            internal DataColumn BColumn {
                get {
                    return this.columnB;
                }
            }
            
            internal DataColumn CColumn {
                get {
                    return this.columnC;
                }
            }
            
            internal DataColumn DColumn {
                get {
                    return this.columnD;
                }
            }
            
            internal DataColumn EColumn {
                get {
                    return this.columnE;
                }
            }
            
            internal DataColumn FColumn {
                get {
                    return this.columnF;
                }
            }
            
            public DetailsRow this[int index] {
                get {
                    return ((DetailsRow)(this.Rows[index]));
                }
            }
            
            public event DetailsRowChangeEventHandler DetailsRowChanged;
            
            public event DetailsRowChangeEventHandler DetailsRowChanging;
            
            public event DetailsRowChangeEventHandler DetailsRowDeleted;
            
            public event DetailsRowChangeEventHandler DetailsRowDeleting;
            
            public void AddDetailsRow(DetailsRow row) {
                this.Rows.Add(row);
            }
            
            public DetailsRow AddDetailsRow(string A, string B, string C, string D, string E, string F) {
                DetailsRow rowDetailsRow = ((DetailsRow)(this.NewRow()));
                rowDetailsRow.ItemArray = new object[] {
                        A,
                        B,
                        C,
                        D,
                        E,
                        F};
                this.Rows.Add(rowDetailsRow);
                return rowDetailsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DetailsDataTable cln = ((DetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DetailsDataTable();
            }
            
            internal void InitVars() {
                this.columnA = this.Columns["A"];
                this.columnB = this.Columns["B"];
                this.columnC = this.Columns["C"];
                this.columnD = this.Columns["D"];
                this.columnE = this.Columns["E"];
                this.columnF = this.Columns["F"];
            }
            
            private void InitClass() {
                this.columnA = new DataColumn("A", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnA);
                this.columnB = new DataColumn("B", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnB);
                this.columnC = new DataColumn("C", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnC);
                this.columnD = new DataColumn("D", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnD);
                this.columnE = new DataColumn("E", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnE);
                this.columnF = new DataColumn("F", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnF);
            }
            
            public DetailsRow NewDetailsRow() {
                return ((DetailsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DetailsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DetailsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DetailsRowChanged != null)) {
                    this.DetailsRowChanged(this, new DetailsRowChangeEvent(((DetailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DetailsRowChanging != null)) {
                    this.DetailsRowChanging(this, new DetailsRowChangeEvent(((DetailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DetailsRowDeleted != null)) {
                    this.DetailsRowDeleted(this, new DetailsRowChangeEvent(((DetailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DetailsRowDeleting != null)) {
                    this.DetailsRowDeleting(this, new DetailsRowChangeEvent(((DetailsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDetailsRow(DetailsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DetailsRow : DataRow {
            
            private DetailsDataTable tableDetails;
            
            internal DetailsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDetails = ((DetailsDataTable)(this.Table));
            }
            
            public string A {
                get {
                    try {
                        return ((string)(this[this.tableDetails.AColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetails.AColumn] = value;
                }
            }
            
            public string B {
                get {
                    try {
                        return ((string)(this[this.tableDetails.BColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetails.BColumn] = value;
                }
            }
            
            public string C {
                get {
                    try {
                        return ((string)(this[this.tableDetails.CColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetails.CColumn] = value;
                }
            }
            
            public string D {
                get {
                    try {
                        return ((string)(this[this.tableDetails.DColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetails.DColumn] = value;
                }
            }
            
            public string E {
                get {
                    try {
                        return ((string)(this[this.tableDetails.EColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetails.EColumn] = value;
                }
            }
            
            public string F {
                get {
                    try {
                        return ((string)(this[this.tableDetails.FColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetails.FColumn] = value;
                }
            }
            
            public bool IsANull() {
                return this.IsNull(this.tableDetails.AColumn);
            }
            
            public void SetANull() {
                this[this.tableDetails.AColumn] = System.Convert.DBNull;
            }
            
            public bool IsBNull() {
                return this.IsNull(this.tableDetails.BColumn);
            }
            
            public void SetBNull() {
                this[this.tableDetails.BColumn] = System.Convert.DBNull;
            }
            
            public bool IsCNull() {
                return this.IsNull(this.tableDetails.CColumn);
            }
            
            public void SetCNull() {
                this[this.tableDetails.CColumn] = System.Convert.DBNull;
            }
            
            public bool IsDNull() {
                return this.IsNull(this.tableDetails.DColumn);
            }
            
            public void SetDNull() {
                this[this.tableDetails.DColumn] = System.Convert.DBNull;
            }
            
            public bool IsENull() {
                return this.IsNull(this.tableDetails.EColumn);
            }
            
            public void SetENull() {
                this[this.tableDetails.EColumn] = System.Convert.DBNull;
            }
            
            public bool IsFNull() {
                return this.IsNull(this.tableDetails.FColumn);
            }
            
            public void SetFNull() {
                this[this.tableDetails.FColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DetailsRowChangeEvent : EventArgs {
            
            private DetailsRow eventRow;
            
            private DataRowAction eventAction;
            
            public DetailsRowChangeEvent(DetailsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
