//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Camelot.datasets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class vetting : DataSet {
        
        private vetting_detailsDataTable tablevetting_details;
        
        public vetting() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected vetting(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["vetting_details"] != null)) {
                    this.Tables.Add(new vetting_detailsDataTable(ds.Tables["vetting_details"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public vetting_detailsDataTable vetting_details {
            get {
                return this.tablevetting_details;
            }
        }
        
        public override DataSet Clone() {
            vetting cln = ((vetting)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["vetting_details"] != null)) {
                this.Tables.Add(new vetting_detailsDataTable(ds.Tables["vetting_details"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablevetting_details = ((vetting_detailsDataTable)(this.Tables["vetting_details"]));
            if ((this.tablevetting_details != null)) {
                this.tablevetting_details.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "vetting";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/vetting.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablevetting_details = new vetting_detailsDataTable();
            this.Tables.Add(this.tablevetting_details);
        }
        
        private bool ShouldSerializevetting_details() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void vetting_detailsRowChangeEventHandler(object sender, vetting_detailsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class vetting_detailsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnGuardian;
            
            private DataColumn columnProperty;
            
            private DataColumn columnstart;
            
            private DataColumn columnphoto;
            
            private DataColumn columnlicense;
            
            private DataColumn columnapplication;
            
            private DataColumn column_bank_utility;
            
            private DataColumn columnreferences;
            
            private DataColumn columnbooklet;
            
            private DataColumn columnnotes;
            
            private DataColumn columnstanding_order;
            
            internal vetting_detailsDataTable() : 
                    base("vetting_details") {
                this.InitClass();
            }
            
            internal vetting_detailsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn GuardianColumn {
                get {
                    return this.columnGuardian;
                }
            }
            
            internal DataColumn PropertyColumn {
                get {
                    return this.columnProperty;
                }
            }
            
            internal DataColumn startColumn {
                get {
                    return this.columnstart;
                }
            }
            
            internal DataColumn photoColumn {
                get {
                    return this.columnphoto;
                }
            }
            
            internal DataColumn licenseColumn {
                get {
                    return this.columnlicense;
                }
            }
            
            internal DataColumn applicationColumn {
                get {
                    return this.columnapplication;
                }
            }
            
            internal DataColumn _bank_utilityColumn {
                get {
                    return this.column_bank_utility;
                }
            }
            
            internal DataColumn referencesColumn {
                get {
                    return this.columnreferences;
                }
            }
            
            internal DataColumn bookletColumn {
                get {
                    return this.columnbooklet;
                }
            }
            
            internal DataColumn notesColumn {
                get {
                    return this.columnnotes;
                }
            }
            
            internal DataColumn standing_orderColumn {
                get {
                    return this.columnstanding_order;
                }
            }
            
            public vetting_detailsRow this[int index] {
                get {
                    return ((vetting_detailsRow)(this.Rows[index]));
                }
            }
            
            public event vetting_detailsRowChangeEventHandler vetting_detailsRowChanged;
            
            public event vetting_detailsRowChangeEventHandler vetting_detailsRowChanging;
            
            public event vetting_detailsRowChangeEventHandler vetting_detailsRowDeleted;
            
            public event vetting_detailsRowChangeEventHandler vetting_detailsRowDeleting;
            
            public void Addvetting_detailsRow(vetting_detailsRow row) {
                this.Rows.Add(row);
            }
            
            public vetting_detailsRow Addvetting_detailsRow(string Guardian, string Property, string start, string photo, string license, string application, string _bank_utility, string references, string booklet, string notes, string standing_order) {
                vetting_detailsRow rowvetting_detailsRow = ((vetting_detailsRow)(this.NewRow()));
                rowvetting_detailsRow.ItemArray = new object[] {
                        Guardian,
                        Property,
                        start,
                        photo,
                        license,
                        application,
                        _bank_utility,
                        references,
                        booklet,
                        notes,
                        standing_order};
                this.Rows.Add(rowvetting_detailsRow);
                return rowvetting_detailsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                vetting_detailsDataTable cln = ((vetting_detailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new vetting_detailsDataTable();
            }
            
            internal void InitVars() {
                this.columnGuardian = this.Columns["Guardian"];
                this.columnProperty = this.Columns["Property"];
                this.columnstart = this.Columns["start"];
                this.columnphoto = this.Columns["photo"];
                this.columnlicense = this.Columns["license"];
                this.columnapplication = this.Columns["application"];
                this.column_bank_utility = this.Columns["bank-utility"];
                this.columnreferences = this.Columns["references"];
                this.columnbooklet = this.Columns["booklet"];
                this.columnnotes = this.Columns["notes"];
                this.columnstanding_order = this.Columns["standing order"];
            }
            
            private void InitClass() {
                this.columnGuardian = new DataColumn("Guardian", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGuardian);
                this.columnProperty = new DataColumn("Property", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProperty);
                this.columnstart = new DataColumn("start", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstart);
                this.columnphoto = new DataColumn("photo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnphoto);
                this.columnlicense = new DataColumn("license", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlicense);
                this.columnapplication = new DataColumn("application", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnapplication);
                this.column_bank_utility = new DataColumn("bank-utility", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column_bank_utility);
                this.columnreferences = new DataColumn("references", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnreferences);
                this.columnbooklet = new DataColumn("booklet", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbooklet);
                this.columnnotes = new DataColumn("notes", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnotes);
                this.columnstanding_order = new DataColumn("standing order", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstanding_order);
            }
            
            public vetting_detailsRow Newvetting_detailsRow() {
                return ((vetting_detailsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new vetting_detailsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(vetting_detailsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.vetting_detailsRowChanged != null)) {
                    this.vetting_detailsRowChanged(this, new vetting_detailsRowChangeEvent(((vetting_detailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.vetting_detailsRowChanging != null)) {
                    this.vetting_detailsRowChanging(this, new vetting_detailsRowChangeEvent(((vetting_detailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.vetting_detailsRowDeleted != null)) {
                    this.vetting_detailsRowDeleted(this, new vetting_detailsRowChangeEvent(((vetting_detailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.vetting_detailsRowDeleting != null)) {
                    this.vetting_detailsRowDeleting(this, new vetting_detailsRowChangeEvent(((vetting_detailsRow)(e.Row)), e.Action));
                }
            }
            
            public void Removevetting_detailsRow(vetting_detailsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class vetting_detailsRow : DataRow {
            
            private vetting_detailsDataTable tablevetting_details;
            
            internal vetting_detailsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablevetting_details = ((vetting_detailsDataTable)(this.Table));
            }
            
            public string Guardian {
                get {
                    try {
                        return ((string)(this[this.tablevetting_details.GuardianColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevetting_details.GuardianColumn] = value;
                }
            }
            
            public string Property {
                get {
                    try {
                        return ((string)(this[this.tablevetting_details.PropertyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevetting_details.PropertyColumn] = value;
                }
            }
            
            public string start {
                get {
                    try {
                        return ((string)(this[this.tablevetting_details.startColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevetting_details.startColumn] = value;
                }
            }
            
            public string photo {
                get {
                    try {
                        return ((string)(this[this.tablevetting_details.photoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevetting_details.photoColumn] = value;
                }
            }
            
            public string license {
                get {
                    try {
                        return ((string)(this[this.tablevetting_details.licenseColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevetting_details.licenseColumn] = value;
                }
            }
            
            public string application {
                get {
                    try {
                        return ((string)(this[this.tablevetting_details.applicationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevetting_details.applicationColumn] = value;
                }
            }
            
            public string _bank_utility {
                get {
                    try {
                        return ((string)(this[this.tablevetting_details._bank_utilityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevetting_details._bank_utilityColumn] = value;
                }
            }
            
            public string references {
                get {
                    try {
                        return ((string)(this[this.tablevetting_details.referencesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevetting_details.referencesColumn] = value;
                }
            }
            
            public string booklet {
                get {
                    try {
                        return ((string)(this[this.tablevetting_details.bookletColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevetting_details.bookletColumn] = value;
                }
            }
            
            public string notes {
                get {
                    try {
                        return ((string)(this[this.tablevetting_details.notesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevetting_details.notesColumn] = value;
                }
            }
            
            public string standing_order {
                get {
                    try {
                        return ((string)(this[this.tablevetting_details.standing_orderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevetting_details.standing_orderColumn] = value;
                }
            }
            
            public bool IsGuardianNull() {
                return this.IsNull(this.tablevetting_details.GuardianColumn);
            }
            
            public void SetGuardianNull() {
                this[this.tablevetting_details.GuardianColumn] = System.Convert.DBNull;
            }
            
            public bool IsPropertyNull() {
                return this.IsNull(this.tablevetting_details.PropertyColumn);
            }
            
            public void SetPropertyNull() {
                this[this.tablevetting_details.PropertyColumn] = System.Convert.DBNull;
            }
            
            public bool IsstartNull() {
                return this.IsNull(this.tablevetting_details.startColumn);
            }
            
            public void SetstartNull() {
                this[this.tablevetting_details.startColumn] = System.Convert.DBNull;
            }
            
            public bool IsphotoNull() {
                return this.IsNull(this.tablevetting_details.photoColumn);
            }
            
            public void SetphotoNull() {
                this[this.tablevetting_details.photoColumn] = System.Convert.DBNull;
            }
            
            public bool IslicenseNull() {
                return this.IsNull(this.tablevetting_details.licenseColumn);
            }
            
            public void SetlicenseNull() {
                this[this.tablevetting_details.licenseColumn] = System.Convert.DBNull;
            }
            
            public bool IsapplicationNull() {
                return this.IsNull(this.tablevetting_details.applicationColumn);
            }
            
            public void SetapplicationNull() {
                this[this.tablevetting_details.applicationColumn] = System.Convert.DBNull;
            }
            
            public bool Is_bank_utilityNull() {
                return this.IsNull(this.tablevetting_details._bank_utilityColumn);
            }
            
            public void Set_bank_utilityNull() {
                this[this.tablevetting_details._bank_utilityColumn] = System.Convert.DBNull;
            }
            
            public bool IsreferencesNull() {
                return this.IsNull(this.tablevetting_details.referencesColumn);
            }
            
            public void SetreferencesNull() {
                this[this.tablevetting_details.referencesColumn] = System.Convert.DBNull;
            }
            
            public bool IsbookletNull() {
                return this.IsNull(this.tablevetting_details.bookletColumn);
            }
            
            public void SetbookletNull() {
                this[this.tablevetting_details.bookletColumn] = System.Convert.DBNull;
            }
            
            public bool IsnotesNull() {
                return this.IsNull(this.tablevetting_details.notesColumn);
            }
            
            public void SetnotesNull() {
                this[this.tablevetting_details.notesColumn] = System.Convert.DBNull;
            }
            
            public bool Isstanding_orderNull() {
                return this.IsNull(this.tablevetting_details.standing_orderColumn);
            }
            
            public void Setstanding_orderNull() {
                this[this.tablevetting_details.standing_orderColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class vetting_detailsRowChangeEvent : EventArgs {
            
            private vetting_detailsRow eventRow;
            
            private DataRowAction eventAction;
            
            public vetting_detailsRowChangeEvent(vetting_detailsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public vetting_detailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
