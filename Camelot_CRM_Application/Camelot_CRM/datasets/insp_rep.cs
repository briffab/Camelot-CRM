//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Camelot.datasets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class insp_rep : DataSet {
        
        private AddressDataTable tableAddress;
        
        public insp_rep() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected insp_rep(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Address"] != null)) {
                    this.Tables.Add(new AddressDataTable(ds.Tables["Address"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AddressDataTable Address {
            get {
                return this.tableAddress;
            }
        }
        
        public override DataSet Clone() {
            insp_rep cln = ((insp_rep)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Address"] != null)) {
                this.Tables.Add(new AddressDataTable(ds.Tables["Address"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAddress = ((AddressDataTable)(this.Tables["Address"]));
            if ((this.tableAddress != null)) {
                this.tableAddress.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "insp_rep";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/insp_rep.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAddress = new AddressDataTable();
            this.Tables.Add(this.tableAddress);
        }
        
        private bool ShouldSerializeAddress() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void AddressRowChangeEventHandler(object sender, AddressRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFirstname;
            
            private DataColumn columnCompany_name;
            
            private DataColumn columnAddress1;
            
            private DataColumn columnAddress2;
            
            private DataColumn columnAddress3;
            
            private DataColumn columnAddress4;
            
            private DataColumn columnAddress5;
            
            private DataColumn columnCity;
            
            private DataColumn columnPostalcode;
            
            private DataColumn columnLastname;
            
            private DataColumn columnInspector;
            
            private DataColumn columnProperty;
            
            private DataColumn columninsp_date;
            
            internal AddressDataTable() : 
                    base("Address") {
                this.InitClass();
            }
            
            internal AddressDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FirstnameColumn {
                get {
                    return this.columnFirstname;
                }
            }
            
            internal DataColumn Company_nameColumn {
                get {
                    return this.columnCompany_name;
                }
            }
            
            internal DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            internal DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            internal DataColumn Address3Column {
                get {
                    return this.columnAddress3;
                }
            }
            
            internal DataColumn Address4Column {
                get {
                    return this.columnAddress4;
                }
            }
            
            internal DataColumn Address5Column {
                get {
                    return this.columnAddress5;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn PostalcodeColumn {
                get {
                    return this.columnPostalcode;
                }
            }
            
            internal DataColumn LastnameColumn {
                get {
                    return this.columnLastname;
                }
            }
            
            internal DataColumn InspectorColumn {
                get {
                    return this.columnInspector;
                }
            }
            
            internal DataColumn PropertyColumn {
                get {
                    return this.columnProperty;
                }
            }
            
            internal DataColumn insp_dateColumn {
                get {
                    return this.columninsp_date;
                }
            }
            
            public AddressRow this[int index] {
                get {
                    return ((AddressRow)(this.Rows[index]));
                }
            }
            
            public event AddressRowChangeEventHandler AddressRowChanged;
            
            public event AddressRowChangeEventHandler AddressRowChanging;
            
            public event AddressRowChangeEventHandler AddressRowDeleted;
            
            public event AddressRowChangeEventHandler AddressRowDeleting;
            
            public void AddAddressRow(AddressRow row) {
                this.Rows.Add(row);
            }
            
            public AddressRow AddAddressRow(string Firstname, string Company_name, string Address1, string Address2, string Address3, string Address4, string Address5, string City, string Postalcode, string Lastname, string Inspector, string Property, string insp_date) {
                AddressRow rowAddressRow = ((AddressRow)(this.NewRow()));
                rowAddressRow.ItemArray = new object[] {
                        Firstname,
                        Company_name,
                        Address1,
                        Address2,
                        Address3,
                        Address4,
                        Address5,
                        City,
                        Postalcode,
                        Lastname,
                        Inspector,
                        Property,
                        insp_date};
                this.Rows.Add(rowAddressRow);
                return rowAddressRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AddressDataTable cln = ((AddressDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AddressDataTable();
            }
            
            internal void InitVars() {
                this.columnFirstname = this.Columns["Firstname"];
                this.columnCompany_name = this.Columns["Company_name"];
                this.columnAddress1 = this.Columns["Address1"];
                this.columnAddress2 = this.Columns["Address2"];
                this.columnAddress3 = this.Columns["Address3"];
                this.columnAddress4 = this.Columns["Address4"];
                this.columnAddress5 = this.Columns["Address5"];
                this.columnCity = this.Columns["City"];
                this.columnPostalcode = this.Columns["Postalcode"];
                this.columnLastname = this.Columns["Lastname"];
                this.columnInspector = this.Columns["Inspector"];
                this.columnProperty = this.Columns["Property"];
                this.columninsp_date = this.Columns["insp_date"];
            }
            
            private void InitClass() {
                this.columnFirstname = new DataColumn("Firstname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstname);
                this.columnCompany_name = new DataColumn("Company_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompany_name);
                this.columnAddress1 = new DataColumn("Address1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new DataColumn("Address2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress2);
                this.columnAddress3 = new DataColumn("Address3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress3);
                this.columnAddress4 = new DataColumn("Address4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress4);
                this.columnAddress5 = new DataColumn("Address5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress5);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnPostalcode = new DataColumn("Postalcode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalcode);
                this.columnLastname = new DataColumn("Lastname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastname);
                this.columnInspector = new DataColumn("Inspector", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInspector);
                this.columnProperty = new DataColumn("Property", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProperty);
                this.columninsp_date = new DataColumn("insp_date", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columninsp_date);
            }
            
            public AddressRow NewAddressRow() {
                return ((AddressRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AddressRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AddressRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AddressRowChanged != null)) {
                    this.AddressRowChanged(this, new AddressRowChangeEvent(((AddressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AddressRowChanging != null)) {
                    this.AddressRowChanging(this, new AddressRowChangeEvent(((AddressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AddressRowDeleted != null)) {
                    this.AddressRowDeleted(this, new AddressRowChangeEvent(((AddressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AddressRowDeleting != null)) {
                    this.AddressRowDeleting(this, new AddressRowChangeEvent(((AddressRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAddressRow(AddressRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressRow : DataRow {
            
            private AddressDataTable tableAddress;
            
            internal AddressRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAddress = ((AddressDataTable)(this.Table));
            }
            
            public string Firstname {
                get {
                    try {
                        return ((string)(this[this.tableAddress.FirstnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.FirstnameColumn] = value;
                }
            }
            
            public string Company_name {
                get {
                    try {
                        return ((string)(this[this.tableAddress.Company_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.Company_nameColumn] = value;
                }
            }
            
            public string Address1 {
                get {
                    try {
                        return ((string)(this[this.tableAddress.Address1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.Address1Column] = value;
                }
            }
            
            public string Address2 {
                get {
                    try {
                        return ((string)(this[this.tableAddress.Address2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.Address2Column] = value;
                }
            }
            
            public string Address3 {
                get {
                    try {
                        return ((string)(this[this.tableAddress.Address3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.Address3Column] = value;
                }
            }
            
            public string Address4 {
                get {
                    try {
                        return ((string)(this[this.tableAddress.Address4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.Address4Column] = value;
                }
            }
            
            public string Address5 {
                get {
                    try {
                        return ((string)(this[this.tableAddress.Address5Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.Address5Column] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableAddress.CityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.CityColumn] = value;
                }
            }
            
            public string Postalcode {
                get {
                    try {
                        return ((string)(this[this.tableAddress.PostalcodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.PostalcodeColumn] = value;
                }
            }
            
            public string Lastname {
                get {
                    try {
                        return ((string)(this[this.tableAddress.LastnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.LastnameColumn] = value;
                }
            }
            
            public string Inspector {
                get {
                    try {
                        return ((string)(this[this.tableAddress.InspectorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.InspectorColumn] = value;
                }
            }
            
            public string Property {
                get {
                    try {
                        return ((string)(this[this.tableAddress.PropertyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.PropertyColumn] = value;
                }
            }
            
            public string insp_date {
                get {
                    try {
                        return ((string)(this[this.tableAddress.insp_dateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.insp_dateColumn] = value;
                }
            }
            
            public bool IsFirstnameNull() {
                return this.IsNull(this.tableAddress.FirstnameColumn);
            }
            
            public void SetFirstnameNull() {
                this[this.tableAddress.FirstnameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCompany_nameNull() {
                return this.IsNull(this.tableAddress.Company_nameColumn);
            }
            
            public void SetCompany_nameNull() {
                this[this.tableAddress.Company_nameColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddress1Null() {
                return this.IsNull(this.tableAddress.Address1Column);
            }
            
            public void SetAddress1Null() {
                this[this.tableAddress.Address1Column] = System.Convert.DBNull;
            }
            
            public bool IsAddress2Null() {
                return this.IsNull(this.tableAddress.Address2Column);
            }
            
            public void SetAddress2Null() {
                this[this.tableAddress.Address2Column] = System.Convert.DBNull;
            }
            
            public bool IsAddress3Null() {
                return this.IsNull(this.tableAddress.Address3Column);
            }
            
            public void SetAddress3Null() {
                this[this.tableAddress.Address3Column] = System.Convert.DBNull;
            }
            
            public bool IsAddress4Null() {
                return this.IsNull(this.tableAddress.Address4Column);
            }
            
            public void SetAddress4Null() {
                this[this.tableAddress.Address4Column] = System.Convert.DBNull;
            }
            
            public bool IsAddress5Null() {
                return this.IsNull(this.tableAddress.Address5Column);
            }
            
            public void SetAddress5Null() {
                this[this.tableAddress.Address5Column] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableAddress.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableAddress.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalcodeNull() {
                return this.IsNull(this.tableAddress.PostalcodeColumn);
            }
            
            public void SetPostalcodeNull() {
                this[this.tableAddress.PostalcodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastnameNull() {
                return this.IsNull(this.tableAddress.LastnameColumn);
            }
            
            public void SetLastnameNull() {
                this[this.tableAddress.LastnameColumn] = System.Convert.DBNull;
            }
            
            public bool IsInspectorNull() {
                return this.IsNull(this.tableAddress.InspectorColumn);
            }
            
            public void SetInspectorNull() {
                this[this.tableAddress.InspectorColumn] = System.Convert.DBNull;
            }
            
            public bool IsPropertyNull() {
                return this.IsNull(this.tableAddress.PropertyColumn);
            }
            
            public void SetPropertyNull() {
                this[this.tableAddress.PropertyColumn] = System.Convert.DBNull;
            }
            
            public bool Isinsp_dateNull() {
                return this.IsNull(this.tableAddress.insp_dateColumn);
            }
            
            public void Setinsp_dateNull() {
                this[this.tableAddress.insp_dateColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressRowChangeEvent : EventArgs {
            
            private AddressRow eventRow;
            
            private DataRowAction eventAction;
            
            public AddressRowChangeEvent(AddressRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AddressRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
