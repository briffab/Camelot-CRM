//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Camelot.datasets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class empty : DataSet {
        
        private detailsDataTable tabledetails;
        
        public empty() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected empty(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["details"] != null)) {
                    this.Tables.Add(new detailsDataTable(ds.Tables["details"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public detailsDataTable details {
            get {
                return this.tabledetails;
            }
        }
        
        public override DataSet Clone() {
            empty cln = ((empty)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["details"] != null)) {
                this.Tables.Add(new detailsDataTable(ds.Tables["details"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tabledetails = ((detailsDataTable)(this.Tables["details"]));
            if ((this.tabledetails != null)) {
                this.tabledetails.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "empty";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/empty.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabledetails = new detailsDataTable();
            this.Tables.Add(this.tabledetails);
        }
        
        private bool ShouldSerializedetails() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void detailsRowChangeEventHandler(object sender, detailsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class detailsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnA;
            
            private DataColumn columnB;
            
            private DataColumn columnC;
            
            private DataColumn columnD;
            
            private DataColumn columnE;
            
            private DataColumn columnF;
            
            private DataColumn columnG;
            
            internal detailsDataTable() : 
                    base("details") {
                this.InitClass();
            }
            
            internal detailsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AColumn {
                get {
                    return this.columnA;
                }
            }
            
            internal DataColumn BColumn {
                get {
                    return this.columnB;
                }
            }
            
            internal DataColumn CColumn {
                get {
                    return this.columnC;
                }
            }
            
            internal DataColumn DColumn {
                get {
                    return this.columnD;
                }
            }
            
            internal DataColumn EColumn {
                get {
                    return this.columnE;
                }
            }
            
            internal DataColumn FColumn {
                get {
                    return this.columnF;
                }
            }
            
            internal DataColumn GColumn {
                get {
                    return this.columnG;
                }
            }
            
            public detailsRow this[int index] {
                get {
                    return ((detailsRow)(this.Rows[index]));
                }
            }
            
            public event detailsRowChangeEventHandler detailsRowChanged;
            
            public event detailsRowChangeEventHandler detailsRowChanging;
            
            public event detailsRowChangeEventHandler detailsRowDeleted;
            
            public event detailsRowChangeEventHandler detailsRowDeleting;
            
            public void AdddetailsRow(detailsRow row) {
                this.Rows.Add(row);
            }
            
            public detailsRow AdddetailsRow(string A, string B, string C, string D, string E, string F, string G) {
                detailsRow rowdetailsRow = ((detailsRow)(this.NewRow()));
                rowdetailsRow.ItemArray = new object[] {
                        A,
                        B,
                        C,
                        D,
                        E,
                        F,
                        G};
                this.Rows.Add(rowdetailsRow);
                return rowdetailsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                detailsDataTable cln = ((detailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new detailsDataTable();
            }
            
            internal void InitVars() {
                this.columnA = this.Columns["A"];
                this.columnB = this.Columns["B"];
                this.columnC = this.Columns["C"];
                this.columnD = this.Columns["D"];
                this.columnE = this.Columns["E"];
                this.columnF = this.Columns["F"];
                this.columnG = this.Columns["G"];
            }
            
            private void InitClass() {
                this.columnA = new DataColumn("A", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnA);
                this.columnB = new DataColumn("B", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnB);
                this.columnC = new DataColumn("C", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnC);
                this.columnD = new DataColumn("D", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnD);
                this.columnE = new DataColumn("E", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnE);
                this.columnF = new DataColumn("F", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnF);
                this.columnG = new DataColumn("G", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnG);
                this.columnA.AllowDBNull = false;
            }
            
            public detailsRow NewdetailsRow() {
                return ((detailsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new detailsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(detailsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.detailsRowChanged != null)) {
                    this.detailsRowChanged(this, new detailsRowChangeEvent(((detailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.detailsRowChanging != null)) {
                    this.detailsRowChanging(this, new detailsRowChangeEvent(((detailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.detailsRowDeleted != null)) {
                    this.detailsRowDeleted(this, new detailsRowChangeEvent(((detailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.detailsRowDeleting != null)) {
                    this.detailsRowDeleting(this, new detailsRowChangeEvent(((detailsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovedetailsRow(detailsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class detailsRow : DataRow {
            
            private detailsDataTable tabledetails;
            
            internal detailsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabledetails = ((detailsDataTable)(this.Table));
            }
            
            public string A {
                get {
                    return ((string)(this[this.tabledetails.AColumn]));
                }
                set {
                    this[this.tabledetails.AColumn] = value;
                }
            }
            
            public string B {
                get {
                    try {
                        return ((string)(this[this.tabledetails.BColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledetails.BColumn] = value;
                }
            }
            
            public string C {
                get {
                    try {
                        return ((string)(this[this.tabledetails.CColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledetails.CColumn] = value;
                }
            }
            
            public string D {
                get {
                    try {
                        return ((string)(this[this.tabledetails.DColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledetails.DColumn] = value;
                }
            }
            
            public string E {
                get {
                    try {
                        return ((string)(this[this.tabledetails.EColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledetails.EColumn] = value;
                }
            }
            
            public string F {
                get {
                    try {
                        return ((string)(this[this.tabledetails.FColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledetails.FColumn] = value;
                }
            }
            
            public string G {
                get {
                    try {
                        return ((string)(this[this.tabledetails.GColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledetails.GColumn] = value;
                }
            }
            
            public bool IsBNull() {
                return this.IsNull(this.tabledetails.BColumn);
            }
            
            public void SetBNull() {
                this[this.tabledetails.BColumn] = System.Convert.DBNull;
            }
            
            public bool IsCNull() {
                return this.IsNull(this.tabledetails.CColumn);
            }
            
            public void SetCNull() {
                this[this.tabledetails.CColumn] = System.Convert.DBNull;
            }
            
            public bool IsDNull() {
                return this.IsNull(this.tabledetails.DColumn);
            }
            
            public void SetDNull() {
                this[this.tabledetails.DColumn] = System.Convert.DBNull;
            }
            
            public bool IsENull() {
                return this.IsNull(this.tabledetails.EColumn);
            }
            
            public void SetENull() {
                this[this.tabledetails.EColumn] = System.Convert.DBNull;
            }
            
            public bool IsFNull() {
                return this.IsNull(this.tabledetails.FColumn);
            }
            
            public void SetFNull() {
                this[this.tabledetails.FColumn] = System.Convert.DBNull;
            }
            
            public bool IsGNull() {
                return this.IsNull(this.tabledetails.GColumn);
            }
            
            public void SetGNull() {
                this[this.tabledetails.GColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class detailsRowChangeEvent : EventArgs {
            
            private detailsRow eventRow;
            
            private DataRowAction eventAction;
            
            public detailsRowChangeEvent(detailsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public detailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
