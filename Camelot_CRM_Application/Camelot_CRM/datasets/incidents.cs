//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Camelot.datasets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class incidents : DataSet {
        
        private incdetailsDataTable tableincdetails;
        
        public incidents() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected incidents(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["incdetails"] != null)) {
                    this.Tables.Add(new incdetailsDataTable(ds.Tables["incdetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public incdetailsDataTable incdetails {
            get {
                return this.tableincdetails;
            }
        }
        
        public override DataSet Clone() {
            incidents cln = ((incidents)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["incdetails"] != null)) {
                this.Tables.Add(new incdetailsDataTable(ds.Tables["incdetails"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableincdetails = ((incdetailsDataTable)(this.Tables["incdetails"]));
            if ((this.tableincdetails != null)) {
                this.tableincdetails.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "incidents";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/incidents.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableincdetails = new incdetailsDataTable();
            this.Tables.Add(this.tableincdetails);
        }
        
        private bool ShouldSerializeincdetails() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void incdetailsRowChangeEventHandler(object sender, incdetailsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class incdetailsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columninc_id;
            
            private DataColumn columnurgency;
            
            private DataColumn columnresdate;
            
            private DataColumn columnobject_name;
            
            private DataColumn columnproperty_id;
            
            private DataColumn columncdesc;
            
            private DataColumn columnsolution;
            
            private DataColumn columnind_date;
            
            internal incdetailsDataTable() : 
                    base("incdetails") {
                this.InitClass();
            }
            
            internal incdetailsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn inc_idColumn {
                get {
                    return this.columninc_id;
                }
            }
            
            internal DataColumn urgencyColumn {
                get {
                    return this.columnurgency;
                }
            }
            
            internal DataColumn resdateColumn {
                get {
                    return this.columnresdate;
                }
            }
            
            internal DataColumn object_nameColumn {
                get {
                    return this.columnobject_name;
                }
            }
            
            internal DataColumn property_idColumn {
                get {
                    return this.columnproperty_id;
                }
            }
            
            internal DataColumn cdescColumn {
                get {
                    return this.columncdesc;
                }
            }
            
            internal DataColumn solutionColumn {
                get {
                    return this.columnsolution;
                }
            }
            
            internal DataColumn ind_dateColumn {
                get {
                    return this.columnind_date;
                }
            }
            
            public incdetailsRow this[int index] {
                get {
                    return ((incdetailsRow)(this.Rows[index]));
                }
            }
            
            public event incdetailsRowChangeEventHandler incdetailsRowChanged;
            
            public event incdetailsRowChangeEventHandler incdetailsRowChanging;
            
            public event incdetailsRowChangeEventHandler incdetailsRowDeleted;
            
            public event incdetailsRowChangeEventHandler incdetailsRowDeleting;
            
            public void AddincdetailsRow(incdetailsRow row) {
                this.Rows.Add(row);
            }
            
            public incdetailsRow AddincdetailsRow(string inc_id, string urgency, string resdate, string object_name, string property_id, string cdesc, string solution, string ind_date) {
                incdetailsRow rowincdetailsRow = ((incdetailsRow)(this.NewRow()));
                rowincdetailsRow.ItemArray = new object[] {
                        inc_id,
                        urgency,
                        resdate,
                        object_name,
                        property_id,
                        cdesc,
                        solution,
                        ind_date};
                this.Rows.Add(rowincdetailsRow);
                return rowincdetailsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                incdetailsDataTable cln = ((incdetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new incdetailsDataTable();
            }
            
            internal void InitVars() {
                this.columninc_id = this.Columns["inc_id"];
                this.columnurgency = this.Columns["urgency"];
                this.columnresdate = this.Columns["resdate"];
                this.columnobject_name = this.Columns["object_name"];
                this.columnproperty_id = this.Columns["property_id"];
                this.columncdesc = this.Columns["cdesc"];
                this.columnsolution = this.Columns["solution"];
                this.columnind_date = this.Columns["ind_date"];
            }
            
            private void InitClass() {
                this.columninc_id = new DataColumn("inc_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columninc_id);
                this.columnurgency = new DataColumn("urgency", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnurgency);
                this.columnresdate = new DataColumn("resdate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnresdate);
                this.columnobject_name = new DataColumn("object_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnobject_name);
                this.columnproperty_id = new DataColumn("property_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnproperty_id);
                this.columncdesc = new DataColumn("cdesc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncdesc);
                this.columnsolution = new DataColumn("solution", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsolution);
                this.columnind_date = new DataColumn("ind_date", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnind_date);
                this.columncdesc.AllowDBNull = false;
            }
            
            public incdetailsRow NewincdetailsRow() {
                return ((incdetailsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new incdetailsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(incdetailsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.incdetailsRowChanged != null)) {
                    this.incdetailsRowChanged(this, new incdetailsRowChangeEvent(((incdetailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.incdetailsRowChanging != null)) {
                    this.incdetailsRowChanging(this, new incdetailsRowChangeEvent(((incdetailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.incdetailsRowDeleted != null)) {
                    this.incdetailsRowDeleted(this, new incdetailsRowChangeEvent(((incdetailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.incdetailsRowDeleting != null)) {
                    this.incdetailsRowDeleting(this, new incdetailsRowChangeEvent(((incdetailsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveincdetailsRow(incdetailsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class incdetailsRow : DataRow {
            
            private incdetailsDataTable tableincdetails;
            
            internal incdetailsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableincdetails = ((incdetailsDataTable)(this.Table));
            }
            
            public string inc_id {
                get {
                    try {
                        return ((string)(this[this.tableincdetails.inc_idColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableincdetails.inc_idColumn] = value;
                }
            }
            
            public string urgency {
                get {
                    try {
                        return ((string)(this[this.tableincdetails.urgencyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableincdetails.urgencyColumn] = value;
                }
            }
            
            public string resdate {
                get {
                    try {
                        return ((string)(this[this.tableincdetails.resdateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableincdetails.resdateColumn] = value;
                }
            }
            
            public string object_name {
                get {
                    try {
                        return ((string)(this[this.tableincdetails.object_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableincdetails.object_nameColumn] = value;
                }
            }
            
            public string property_id {
                get {
                    try {
                        return ((string)(this[this.tableincdetails.property_idColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableincdetails.property_idColumn] = value;
                }
            }
            
            public string cdesc {
                get {
                    return ((string)(this[this.tableincdetails.cdescColumn]));
                }
                set {
                    this[this.tableincdetails.cdescColumn] = value;
                }
            }
            
            public string solution {
                get {
                    try {
                        return ((string)(this[this.tableincdetails.solutionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableincdetails.solutionColumn] = value;
                }
            }
            
            public string ind_date {
                get {
                    try {
                        return ((string)(this[this.tableincdetails.ind_dateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableincdetails.ind_dateColumn] = value;
                }
            }
            
            public bool Isinc_idNull() {
                return this.IsNull(this.tableincdetails.inc_idColumn);
            }
            
            public void Setinc_idNull() {
                this[this.tableincdetails.inc_idColumn] = System.Convert.DBNull;
            }
            
            public bool IsurgencyNull() {
                return this.IsNull(this.tableincdetails.urgencyColumn);
            }
            
            public void SeturgencyNull() {
                this[this.tableincdetails.urgencyColumn] = System.Convert.DBNull;
            }
            
            public bool IsresdateNull() {
                return this.IsNull(this.tableincdetails.resdateColumn);
            }
            
            public void SetresdateNull() {
                this[this.tableincdetails.resdateColumn] = System.Convert.DBNull;
            }
            
            public bool Isobject_nameNull() {
                return this.IsNull(this.tableincdetails.object_nameColumn);
            }
            
            public void Setobject_nameNull() {
                this[this.tableincdetails.object_nameColumn] = System.Convert.DBNull;
            }
            
            public bool Isproperty_idNull() {
                return this.IsNull(this.tableincdetails.property_idColumn);
            }
            
            public void Setproperty_idNull() {
                this[this.tableincdetails.property_idColumn] = System.Convert.DBNull;
            }
            
            public bool IssolutionNull() {
                return this.IsNull(this.tableincdetails.solutionColumn);
            }
            
            public void SetsolutionNull() {
                this[this.tableincdetails.solutionColumn] = System.Convert.DBNull;
            }
            
            public bool Isind_dateNull() {
                return this.IsNull(this.tableincdetails.ind_dateColumn);
            }
            
            public void Setind_dateNull() {
                this[this.tableincdetails.ind_dateColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class incdetailsRowChangeEvent : EventArgs {
            
            private incdetailsRow eventRow;
            
            private DataRowAction eventAction;
            
            public incdetailsRowChangeEvent(incdetailsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public incdetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
